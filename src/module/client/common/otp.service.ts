import { Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { DataSource, Repository, LessThan, MoreThan } from 'typeorm';
import { OtpEntity } from '@shared/entities';

@Injectable()
export class OtpService {
  private readonly OTP_LIFETIME_MINUTES = 5; // 5 ph√∫t

  constructor(
    @InjectRepository(OtpEntity)
    private readonly otpRepository: Repository<OtpEntity>,
    private readonly dataSource: DataSource,
  ) {}

  /**
   * Generate OTP ng·∫´u nhi√™n 6 ch·ªØ s·ªë
   */
  generateOtp(): string {
    return Math.floor(100000 + Math.random() * 900000).toString();
  }

  /**
   * T·∫°o v√† l∆∞u OTP v√†o database v·ªõi th·ªùi gian h·∫øt h·∫°n 5 ph√∫t
   * N·∫øu ƒë√£ c√≥ OTP c√≤n h·∫°n trong database th√¨ tr·∫£ v·ªÅ OTP ƒë√≥, kh√¥ng t·∫°o m·ªõi
   * Ch·ªâ t·∫°o OTP m·ªõi khi OTP c≈© ƒë√£ h·∫øt h·∫°n
   * @param identifier - Key ƒë·ªÉ identify OTP (vd: 'block-website')
   * @returns OTP ƒë√£ ƒë∆∞·ª£c t·∫°o ho·∫∑c OTP c√≤n h·∫°n
   */
  async createOtp(identifier: string = 'default'): Promise<string> {
    const now = new Date();
    const nowTimestamp = Date.now();

    // S·ª≠ d·ª•ng transaction v·ªõi advisory lock ƒë·ªÉ ƒë·∫£m b·∫£o ch·ªâ 1 request x·ª≠ l√Ω t·∫°i m·ªôt th·ªùi ƒëi·ªÉm
    return await this.dataSource.transaction(async (manager) => {
      // S·ª≠ d·ª•ng PostgreSQL advisory lock d·ª±a tr√™n hash c·ªßa identifier
      const lockId = this.hashIdentifier(identifier);
      
      try {
        // Lock v·ªõi advisory lock (s·∫Ω t·ª± ƒë·ªông unlock khi transaction commit/rollback)
        await manager.query('SELECT pg_advisory_xact_lock($1)', [lockId]);

        // T√¨m OTP ch∆∞a s·ª≠ d·ª•ng c·ªßa identifier (l·∫•y m·ªõi nh·∫•t)
        const existingOtp = await manager.findOne(OtpEntity, {
          where: {
            identifier,
            is_used: false,
          },
          order: {
            created_at: 'DESC',
          },
        });

        // N·∫øu c√≥ OTP, ki·ªÉm tra xem c√≤n h·∫°n kh√¥ng
        if (existingOtp) {
          const expiresAtDate = existingOtp.expires_at instanceof Date 
            ? existingOtp.expires_at 
            : new Date(existingOtp.expires_at);
          
          const expiresAtTimestamp = expiresAtDate.getTime();
          
          // So s√°nh timestamp
          if (expiresAtTimestamp > nowTimestamp) {
            console.log(`[OTP Service] ‚úÖ Found existing valid OTP: ${existingOtp.otp_code}`);
            console.log(`  - expires_at: ${expiresAtDate.toISOString()} (timestamp: ${expiresAtTimestamp})`);
            console.log(`  - now: ${now.toISOString()} (timestamp: ${nowTimestamp})`);
            console.log(`  - remaining: ${Math.round((expiresAtTimestamp - nowTimestamp) / 1000)} seconds`);
            return existingOtp.otp_code;
          } else {
            console.log(`[OTP Service] ‚ö†Ô∏è Existing OTP expired: ${existingOtp.otp_code}`);
            // X√≥a OTP ƒë√£ h·∫øt h·∫°n
            await manager.delete(OtpEntity, { id: existingOtp.id });
          }
        } else {
          console.log(`[OTP Service] ‚ÑπÔ∏è No existing OTP found for identifier: ${identifier}`);
        }

        // N·∫øu kh√¥ng c√≥ OTP c√≤n h·∫°n, t·∫°o OTP m·ªõi
        const otp = this.generateOtp();
        const expiresAt = new Date(Date.now() + this.OTP_LIFETIME_MINUTES * 60 * 1000);

        // X√≥a c√°c OTP c≈© ƒë√£ h·∫øt h·∫°n c·ªßa c√πng identifier (cleanup)
        await manager
          .createQueryBuilder()
          .delete()
          .from(OtpEntity)
          .where('identifier = :identifier', { identifier })
          .andWhere('is_used = :is_used', { is_used: false })
          .andWhere('expires_at <= :now', { now })
          .execute();

        // T·∫°o OTP m·ªõi
        const otpEntity = manager.create(OtpEntity, {
          identifier,
          otp_code: otp,
          expires_at: expiresAt,
          is_used: false,
          is_active: true,
        });

        await manager.save(otpEntity);

        console.log(`[OTP Service] üÜï Created new OTP: ${otp}`);
        console.log(`  - expires_at: ${expiresAt.toISOString()}`);
        console.log(`  - identifier: ${identifier}`);

        return otp;
      } catch (error) {
        console.error(`[OTP Service] Error creating OTP:`, error);
        throw error;
      }
    });
  }

  /**
   * Hash identifier th√†nh s·ªë nguy√™n ƒë·ªÉ d√πng cho advisory lock
   */
  private hashIdentifier(identifier: string): number {
    let hash = 0;
    for (let i = 0; i < identifier.length; i++) {
      const char = identifier.charCodeAt(i);
      hash = ((hash << 5) - hash) + char;
      hash = hash & hash; // Convert to 32bit integer
    }
    return Math.abs(hash);
  }

  /**
   * Validate OTP
   * @param otp - OTP c·∫ßn validate
   * @param identifier - Key identifier
   * @returns true n·∫øu OTP h·ª£p l·ªá, false n·∫øu kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n
   */
  async validateOtp(otp: string, identifier: string = 'default'): Promise<boolean> {
    // S·ª≠ d·ª•ng transaction ƒë·ªÉ ƒë·∫£m b·∫£o t√≠nh nh·∫•t qu√°n
    return await this.dataSource.transaction(async (manager) => {
      const otpEntity = await manager.findOne(OtpEntity, {
        where: {
          identifier,
          otp_code: otp,
          is_used: false,
        },
        order: {
          created_at: 'DESC',
        },
      });

      if (!otpEntity) {
        return false; // OTP kh√¥ng t·ªìn t·∫°i
      }

      // Check h·∫øt h·∫°n
      if (new Date() > otpEntity.expires_at) {
        // T√¨m v√† x√≥a 1 OTP ƒë√£ used c≈© (n·∫øu c√≥) ƒë·ªÉ tr√°nh unique constraint violation
        const usedOtp = await manager.findOne(OtpEntity, {
          where: {
            identifier,
            is_used: true,
          },
          order: {
            used_at: 'ASC', // X√≥a OTP c≈© nh·∫•t
          },
        });
        
        if (usedOtp) {
          await manager.delete(OtpEntity, { id: usedOtp.id });
        }
        
        // ƒê√°nh d·∫•u ƒë√£ h·∫øt h·∫°n
        otpEntity.is_used = true;
        otpEntity.used_at = new Date();
        await manager.save(otpEntity);
        return false; // OTP ƒë√£ h·∫øt h·∫°n
      }

      // T√¨m v√† x√≥a 1 OTP ƒë√£ used c≈© (n·∫øu c√≥) ƒë·ªÉ tr√°nh unique constraint violation
      const usedOtp = await manager.findOne(OtpEntity, {
        where: {
          identifier,
          is_used: true,
        },
        order: {
          used_at: 'ASC', // X√≥a OTP c≈© nh·∫•t
        },
      });
      
      if (usedOtp) {
        await manager.delete(OtpEntity, { id: usedOtp.id });
      }

      // OTP h·ª£p l·ªá, ƒë√°nh d·∫•u ƒë√£ s·ª≠ d·ª•ng
      otpEntity.is_used = true;
      otpEntity.used_at = new Date();
      await manager.save(otpEntity);

      return true;
    });
  }

  /**
   * Clear OTP cho identifier
   */
  async clearOtp(identifier: string = 'default'): Promise<void> {
    await this.otpRepository.delete({
      identifier,
      is_used: false,
    });
  }

  /**
   * Cleanup t·∫•t c·∫£ OTP ƒë√£ h·∫øt h·∫°n (c√≥ th·ªÉ ch·∫°y ƒë·ªãnh k·ª≥ b·∫±ng cron job)
   */
  async cleanupExpiredOtps(): Promise<void> {
    const now = new Date();
    await this.otpRepository.delete({
      expires_at: LessThan(now),
    });
  }

  /**
   * X√≥a c√°c OTP ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng (cleanup old records)
   */
  async cleanupUsedOtps(daysOld: number = 7): Promise<void> {
    const cutoffDate = new Date();
    cutoffDate.setDate(cutoffDate.getDate() - daysOld);

    await this.otpRepository.delete({
      is_used: true,
      used_at: LessThan(cutoffDate),
    });
  }
}

